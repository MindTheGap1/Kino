VIRTUAL ENVIRONMENT IS OPTIONAL

IF YOU HAVE AN ISSUE WITH INSTALLED PACKAGES DO
	pip[3] install -r requirements.txt

and then you /should/ have all the required packages - if a package still isn't installed then you can manually install it and add it to requirements.txt (or let me (david) know and I'll do it myself)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DJANGO

YOU MUST RUN THE FOLLOWING COMMANDS WHEN YOU FIRST CLONE THE REPO:
	python[3] manage.py makemigrations
	python[3] manage.py migrate

If you ever change any models.py files or create any new models.py files you will have to run those commands again

If you want to add a couple of pre-done movies and actors etc (for the sake of saving a little time):
	python[3] manage.py loaddata testmovies

If you ever upload images in the admin menu:
	python[3] manage.py collectstatic
	(and then type yes when it asks)

To RUN THE SERVER (the main command to use):
	python[3] manage.py runserver
	and then you can open http://127.0.0.1:8000/ in your browser

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GIT

To get the project:
	git clone https://github.com/MindTheGap1/Kino

DO NOT WORK IN MASTER BRANCH
	git checkout dev

If you have your own branch to work from, which is a good idea, then:
	git checkout [branch name]

Again, DO NOT WORK IN MASTER

As per last years labs:
	git add *
	git commit -m "[whatever message, ideally descriptive]"
	git push

If you want to merge branches (something that could be done in weekly scrum meetings?)
	make sure everything is added on your branch
	git checkout [branch you want to merge TO]
	git merge [branch to merge TO] [branch you want to merge FROM]

	e.g. merging from a branch called 'david' to the main 'dev' branch:
		git checkout dev
		git merge dev david

Merge conflicts will probably occur, the command line should say which files are affected and then you manually edit those files to be as they should be

Make sure to commit and push after fixing any merge conflicts

Assuming a bit of functionality takes a week to do (in line with the scrum meetings) then it might be a good idea to merge when we're all together in those meetings to be able to fix any minor issues at the time.